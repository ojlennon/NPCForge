# --- START: AWS Route 53---

# resource "aws_route53_zone" "my_hosted_zone" {
#   name = var.domain_name
# }

# resource "aws_acm_certificate" "my_certificate_request" {
#   domain_name               = "*.${var.domain_name}"
#   validation_method         = "DNS"

#   lifecycle {
#     create_before_destroy = true
#   }
# }

# # Wait for cert to be valid
# resource "aws_route53_record" "example_validation" {
#   for_each = {
#     for dvo in aws_acm_certificate.my_certificate_request.domain_validation_options: dvo.domain_name => {
#       name   = dvo.resource_record_name
#       record = dvo.resource_record_value
#       type   = dvo.resource_record_type
#     }
#   }
#   allow_overwrite = true
#   name            = each.value.name
#   records         = [each.value.record]
#   ttl             = 60
#   type            = each.value.type
#   zone_id         = aws_route53_zone.my_hosted_zone.id
# }

# # Waits for certificate to be valid
# resource "aws_acm_certificate_validation" "my_certificate_validation" {
#   certificate_arn         = aws_acm_certificate.my_certificate_request.arn
#   validation_record_fqdns = [for record in aws_route53_record.example_validation: record.fqdn]
# }

# # Add ec2 public ip to domain records# 3. Create the A record pointing to the EC2 instance's public IP
# resource "aws_route53_record" "web_app_dns" {
#   # The ID of the hosted zone you are adding the record to.
#   zone_id = aws_route53_zone.my_hosted_zone.zone_id

#   # The subdomain. Terraform automatically appends the zone name.
#   # So, "web" becomes "web.your-domain.com".
#   name    = "web"
  
#   # The record type. "A" is for an IPv4 address.
#   type    = "A"
  
#   # The Time To Live for the record in seconds.
#   ttl     = "60"
  
#   # The value for the record. We reference the public_ip attribute
#   # from the aws_instance resource we created above.
#   records = [aws_instance.npcforge-server.public_ip]
# }